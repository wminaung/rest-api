generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  name             String
  email            String         @unique
  password         String
  profilePicture   String?
  bio              String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  role             Role           @default(USER)
  comments         Comment[]
  following        Follow[]       @relation("Following")
  followers        Follow[]       @relation("FollowedBy")
  likes            Like[]
  media            Media[]
  notifications    Notification[]
  posts            Post[]         @relation("UserPosts")
}

model Post {
  id         String    @id @default(uuid())
  title      String
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  categoryId String?
  comments   Comment[]
  likes      Like[]
  category   Category? @relation(fields: [categoryId], references: [id])
  user       User      @relation("UserPosts", fields: [userId], references: [id])
  tags       PostTag[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  likes     Like[]
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("FollowedBy", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Media {
  id        String    @id @default(uuid())
  url       String
  type      MediaType
  createdAt DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  posts     Post[]
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  postTags  PostTag[]
}

model PostTag {
  id     String @id @default(uuid())
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])
}

enum MediaType {
  IMAGE
  VIDEO
}

enum Role {
  USER
  ADMIN
}
